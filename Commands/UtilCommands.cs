using DSharpPlus.CommandsNext;
using DSharpPlus;
using DSharpPlus.CommandsNext.Attributes;
using DSharpPlus.Entities;
using DSharpPlus.Interactivity;
using System.Security.Cryptography;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SunflowerBot.Commands
{
    public class UtilCommands : BaseCommandModule
    {
        [Command("del")]
        [Description("–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")]
        [RequireRoles(RoleCheckMode.Any, "Sun Sponsor")]
        public async Task Del(CommandContext ctx, [Description("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")] int numberMessages)
        {
            var currentMsg = await ctx.Channel.GetMessagesAsync(numberMessages + 1);
            await ctx.Channel.DeleteMessagesAsync(currentMsg, "–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `.clear`");

            var delEmbed = new DiscordEmbedBuilder
            {
                Color = DiscordColor.Gold
            };

            delEmbed.WithDescription($"–£–¥–∞–ª–µ–Ω–æ {numberMessages} —Å–æ–æ–±—â–µ–Ω–∏–π");

            var clearMessage = await ctx.Channel.SendMessageAsync(embed: delEmbed).ConfigureAwait(false);
        }

        [Command("dell")]
        [Description("–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –≤—ã–≤–æ–¥–∞ embed")]
        [RequireRoles(RoleCheckMode.Any, "Sun Sponsor")]
        public async Task Deln(CommandContext ctx, [Description("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")] int numberMessages)
        {
            var currentMsg = await ctx.Channel.GetMessagesAsync(numberMessages + 1);
            await ctx.Channel.DeleteMessagesAsync(currentMsg, "–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `.clear`");
        }

        [Command("roll")]
        [Description("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞")]
        [RequireRoles(RoleCheckMode.None)]
        public async Task Roll(CommandContext ctx, [Description("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")] int min, [Description("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")] int max)
        {
            var rnd = new Random();

            var rollEmbed = new DiscordEmbedBuilder
            {
                Color = DiscordColor.Gold
            };

            if (max >= 1 && max > min)
            {
                rollEmbed.WithDescription($"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {rnd.Next(min, max + 1)}");

                var rollMessage = await ctx.Channel.SendMessageAsync(embed: rollEmbed).ConfigureAwait(false);
            }
            else if (max <= 1)
            {
                rollEmbed.WithDescription("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ");

                var rollMessage = await ctx.Channel.SendMessageAsync(embed: rollEmbed).ConfigureAwait(false);
            }
        }

        [Command("inf")]
        [Description("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å—Å—ã–ª–∫–∏")]
        [RequireRoles(RoleCheckMode.None)]
        public async Task Info(CommandContext ctx)
        {
            Console.WriteLine($"[{DateTime.Now}] [Command Log] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ .info –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {ctx.User.Username}");
            var infoEmbed = new DiscordEmbedBuilder
            {
                Title = "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –∑–¥–µ—Å—å!",
                Description = $"–ü—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –æ–∫:\n\nTwitter: https://twitter.com/aniv1re\nArtStation: https://artstation.com/aniv1re\nTwitch: https://twitch.tv/anivire_\n\n–ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:\nDiscord: `null`",
                Color = DiscordColor.Gold,
            };
            infoEmbed.WithThumbnail("https://i.imgur.com/GFBXBoz.jpg", 1000, 500);

            var joinMessage = await ctx.Channel.SendMessageAsync(embed: infoEmbed).ConfigureAwait(false);
            Console.WriteLine($"[{DateTime.Now}] [Chat Log] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç: {joinMessage.Id}");
        }


        [Command("pat")]
        [Description("–ü–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")]
        [RequireRoles(RoleCheckMode.None)]
        public async Task Patreon(CommandContext ctx)
        {
            Console.WriteLine($"[{DateTime.Now}] [Command Log] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ .patreon –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {ctx.User.Username}");
            var patreonEmbed = new DiscordEmbedBuilder
            {
                Title = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!",
                Description = $"–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∑–∞ 1$ –∏–ª–∏ 3$ –Ω–∞ Patreon, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É, —Å–µ–∫—Ä–µ—Ç–Ω—ã–º —ç–≤–µ–Ω—Ç–∞–º –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º –≤ Discord.\n\nPatreon: https://www.patreon.com/aniv1re",
                Color = DiscordColor.Gold,
            };
            patreonEmbed.WithThumbnail("https://cahoicatam.com/images/patreon-logo-png-white-1.png", 1000, 500);
            patreonEmbed.WithFooter("–í—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ—Ç —Ç–∏—Ä–æ–≤ Patreon'–∞ –¥–∞—ë—Ç —Ç–∞–∫–∂–µ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Twitch");

            var joinMessage = await ctx.Channel.SendMessageAsync(embed: patreonEmbed).ConfigureAwait(false);
            Console.WriteLine($"[{DateTime.Now}] [Chat Log] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç: {joinMessage.Id}");
        }

        [Command("rob")]
        [Description("–°–æ–∑–¥–∞—ë—Ç —ç–≤–µ–Ω—Ç –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")]
        [RequireRoles(RoleCheckMode.None)]
        public async Task Rob(CommandContext ctx, [Description("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è (`@username`)")] DiscordMember user)
        {
            Random rnd = new Random();
            var interactivity = ctx.Client.GetInteractivity();
            var statusBar = string.Empty;
            var small = DiscordEmoji.FromName(ctx.Client, ":small:");
            var fullLeft = DiscordEmoji.FromName(ctx.Client, ":fullLeft:");
            var full = DiscordEmoji.FromName(ctx.Client, ":full:");
            var fullRight = DiscordEmoji.FromName(ctx.Client, ":fullRight:");
            var fullRightEnd = DiscordEmoji.FromName(ctx.Client, ":fullRightEnd:");
            var empty = DiscordEmoji.FromName(ctx.Client, ":empty:");
            var emptyRight = DiscordEmoji.FromName(ctx.Client, ":emptyRight:");
            var randomPercent = rnd.Next(1, 100);

            var thiefEmbed = new DiscordEmbedBuilder
            {
                Color = DiscordColor.Gold
            };

            if (randomPercent <= 15)
            {
                statusBar = small + empty + empty + empty + empty + emptyRight;
            }
            else if (randomPercent <= 30)
            {
                statusBar = fullLeft + fullRight + empty + empty + empty + emptyRight;
            }
            else if (randomPercent <= 50)
            {
                statusBar = fullLeft + full + fullRight + empty + empty + emptyRight;
            }
            else if (randomPercent <= 90)
            {
                statusBar = fullLeft + full + full + fullRight + empty + emptyRight;
            }
            else if (randomPercent > 90)
            {
                statusBar = fullLeft + full + full + full + fullRight + emptyRight;
            }
            else if (randomPercent == 100)
            {
                statusBar = fullLeft + full + full + full + full + fullRightEnd;
            }

            if (user == ctx.User)
            {
                thiefEmbed.WithImageUrl("https://answers.ea.com/ea/attachments/ea/battlefield-v-game-information-ru/1635/1/1785C7EE-5715-48CA-A2FC-16479F84D644.jpeg");
            }
            else
            {
                thiefEmbed.WithAuthor(ctx.User.Username + $" –Ω–∞—á–∏–Ω–∞–µ—Ç –≥—Ä–∞–±–∏—Ç—å " + user.Username, null, ctx.User.AvatarUrl);
                thiefEmbed.WithDescription($"–®–∞–Ω—Å –Ω–∞ —É—Å–ø–µ—Ö:\t{statusBar} {randomPercent}%");
            }

            var thiefMessage = await ctx.Channel.SendMessageAsync(embed: thiefEmbed).ConfigureAwait(false);
        }

        [Command("sugg")]
        [Description("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ç–µ–º—É –∞—Ä—Ç–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")]
        [RequireRoles(RoleCheckMode.Any, "Twitch Sub", "Patreon Tier 3$")]
        public async Task Suggest(CommandContext ctx, [Description("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ç–µ–º–∞")] params string[] content)
        {
            var suggestEmbed = new DiscordEmbedBuilder
            {
                Color = DiscordColor.Gold,
            };

            if (string.Join(" ", content) == string.Empty)
            {
                suggestEmbed.WithDescription("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ç–µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è");

                var joinMessage = await ctx.Channel.SendMessageAsync(embed: suggestEmbed).ConfigureAwait(false);
            }
            else
            {
                suggestEmbed.WithTitle("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –∞—Ä—Ç–∞ –º–µ—Å—è—Ü–∞");
                suggestEmbed.WithDescription($"{ctx.User.Mention}: {string.Join(" ", content)}");

                var joinMessage = await ctx.Channel.SendMessageAsync(embed: suggestEmbed).ConfigureAwait(false);

                await joinMessage.CreateReactionAsync(DiscordEmoji.FromName(ctx.Client, ":upVote:")).ConfigureAwait(false);
                await joinMessage.CreateReactionAsync(DiscordEmoji.FromName(ctx.Client, ":downVote:")).ConfigureAwait(false);
            }
        }

        [Command("code")]
        [Description("Waits for a response containing a generated code.")]
        [RequireRoles(RoleCheckMode.None)]
        public async Task WaitForCode(CommandContext ctx)
        {
            var interactivity = ctx.Client.GetInteractivity();

            var codeEmbed = new DiscordEmbedBuilder
            {
                Color = DiscordColor.Gold,
            };

            var codebytes = new byte[8];
            using (var rnd = RandomNumberGenerator.Create())
                rnd.GetBytes(codebytes);

            var code = BitConverter.ToString(codebytes).ToLower().Replace("-", "");

            codeEmbed.WithDescription($"–ü–µ—Ä–≤—ã–π, –∫—Ç–æ –Ω–∞–ø–∏—à–µ—Ç –∫–æ–¥ –≤ —á–∞—Ç, –ø–æ–ª—É—á–∏—Ç –Ω–∏—á–µ–≥–æ: `{code}`");
            await ctx.Channel.SendMessageAsync(embed: codeEmbed).ConfigureAwait(false);

            var msg = await interactivity.WaitForMessageAsync(e => e.Content.Contains(code), TimeSpan.FromSeconds(60));

            codeEmbed.WithDescription($"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {msg.Result.Author.Mention}");
            await ctx.Channel.SendMessageAsync(embed: codeEmbed).ConfigureAwait(false);
        }

        [Command("act")]
        public async Task Activity(CommandContext ctx, params string[] content)
        {
            var changedContent = string.Join(" ", content);

            var activity = new DiscordActivity
            {
                Name = $"{changedContent}",
            };

            var activityEmbed = new DiscordEmbedBuilder
            {
                Description = $"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ `{changedContent}`",
                Color = DiscordColor.Gold,
            };

            await ctx.Client.UpdateStatusAsync(activity);
            await ctx.Channel.SendMessageAsync(embed: activityEmbed).ConfigureAwait(false);
        }
    }
}