using DSharpPlus.CommandsNext;
using DSharpPlus;
using DSharpPlus.CommandsNext.Attributes;
using DSharpPlus.Entities;
using DSharpPlus.Interactivity;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SunflowerBot.Commands
{
    public class UtilCommands : BaseCommandModule
    {
        [Command("del")]
        [Description("–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")]
        [RequireRoles(RoleCheckMode.All, "Sun Sponsor")]
        public async Task Del(CommandContext ctx, [Description("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")]int numberMessages)
        {
            var currentMsg = await ctx.Channel.GetMessagesAsync(numberMessages + 1);
            await ctx.Channel.DeleteMessagesAsync(currentMsg, "–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `.clear`");

            var delEmbed = new DiscordEmbedBuilder
            {
                 Color = DiscordColor.Gold
            };

            delEmbed.WithDescription($"–£–¥–∞–ª–µ–Ω–æ {numberMessages} —Å–æ–æ–±—â–µ–Ω–∏–π");

            var clearMessage = await ctx.Channel.SendMessageAsync(embed: delEmbed).ConfigureAwait(false);
        }

        [Command("deln")]
        [Description("–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –≤—ã–≤–æ–¥–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")]
        [RequireRoles(RoleCheckMode.All, "Sun Sponsor")]
        public async Task Deln(CommandContext ctx, [Description("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")]int numberMessages)
        {
            var currentMsg = await ctx.Channel.GetMessagesAsync(numberMessages + 1);
            await ctx.Channel.DeleteMessagesAsync(currentMsg, "–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `.clear`");
        }

        [Command("roll")]
        [Description("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞")]
        [RequireRoles(RoleCheckMode.All)]
        public async Task Roll(CommandContext ctx, [Description("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")]int min, [Description("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")]int max)
        {
            var rnd = new Random();
            
            var rollEmbed = new DiscordEmbedBuilder
                {
                    Color = DiscordColor.Gold
                };
            
            if (max >= 1 && max > min)
            {
                rollEmbed.WithDescription($"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {rnd.Next(min, max + 1)}");

                var rollMessage = await ctx.Channel.SendMessageAsync(embed: rollEmbed).ConfigureAwait(false);
            }
            else if (max <= 1)   
            {
                rollEmbed.WithDescription("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ");

                var rollMessage = await ctx.Channel.SendMessageAsync(embed: rollEmbed).ConfigureAwait(false);
            }
        }
    }
}